package com.test_task;

import com.test_task.model.Reservation;
import com.test_task.model.User;
import com.test_task.service.ReservationService;
import com.test_task.service.UserService;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;
import java.util.Set;

//Controllers will handle the requests that are passed to this controller by the request handler and return the corresponding views, in this case.
//
//The controllers that were generated by Bootify are configured to return JSON responses, and we will modify them in the next section to return our views.

@Controller
public class PagesController {

    final UserService userService;
    final ReservationService reservationService;

    public PagesController(UserService userService, ReservationService reservationService) {
        this.userService = userService;
        this.reservationService = reservationService;
    }

    @GetMapping("/")
    public String index(Model model) {
        return "index";
    }

    @GetMapping("/register")
    public String register(Model model) {return "register";}

    @GetMapping("/index")
    public String indexPage(Model model) {return "index";}

    @PostMapping("/registerUser")
    public String registerUser(@RequestParam("fullName") String fullName,
                               @RequestParam("username") String username,
                               @RequestParam("password") String password,
                               @ModelAttribute("user") User user){
        Boolean found = userService.userExistsByUsername(username);
        if(!found){
            System.out.println("Such user does not exist");
        user.setFullName(fullName);
        user.setUsername(username);
        user.setPasswordHash(password);
        userService.createUser(user);
        return "index";
        }
        else{
            System.out.println("Such user already exists.");
            return "index";
        }
    }

    @GetMapping("/reservations")
    public String reservations(Model model, HttpSession session) {
        UserDetails principal = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String name = principal.getUsername();
        User user = userService.getUserByUsername(name);

        // This should always be the case
        if (user != null) {
            session.setAttribute("user", user);

            // Empty reservation object in case the user creates a new reservation
            Reservation reservation = new Reservation();
            model.addAttribute("reservation", reservation);
            return "reservations";
        }
        return "index";
    }

    @PostMapping("/reservations-submit")
    public String reservationsSubmit(@ModelAttribute Reservation reservation, Model model, @SessionAttribute("user") User user) {
        // Save to DB after updating
        assert user != null;
        reservation.setUser(user);
        reservationService.create(reservation);
        Set<Reservation> userReservations = user.getReservations();
        userReservations.add(reservation);
        user.setReservations(userReservations);
        userService.update(user.getId(), user);
        return "redirect:/reservations";
    }
}
